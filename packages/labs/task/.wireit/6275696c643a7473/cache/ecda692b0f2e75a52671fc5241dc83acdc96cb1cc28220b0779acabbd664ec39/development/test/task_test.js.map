{"version":3,"file":"task_test.js","sourceRoot":"","sources":["../../src/test/task_test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {ReactiveElement, PropertyValues} from '@lit/reactive-element';\nimport {property} from '@lit/reactive-element/decorators/property.js';\nimport {initialState, Task, TaskStatus, TaskConfig} from '../task.js';\nimport {generateElementName, nextFrame} from './test-helpers.js';\nimport {assert} from '@esm-bundle/chai';\n\n// Note, since tests are not built with production support, detect DEV_MODE\n// by checking if warning API is available.\nconst DEV_MODE = !!ReactiveElement.enableWarning;\n\nif (DEV_MODE) {\n  ReactiveElement.disableWarning?.('change-in-update');\n}\n\nsuite('Task', () => {\n  let container: HTMLElement;\n\n  interface TestElement extends ReactiveElement {\n    task: Task;\n    a: string;\n    b: string;\n    c?: string;\n    resolveTask: () => void;\n    rejectTask: () => void;\n    taskValue?: string;\n    renderedStatus?: string;\n  }\n\n  const defineTestElement = (\n    config?: Partial<TaskConfig<unknown[], string>>\n  ) => {\n    class A extends ReactiveElement {\n      task: Task;\n\n      @property()\n      a = 'a';\n      @property()\n      b = 'b';\n      @property()\n      c?: string;\n\n      resolveTask!: () => void;\n      rejectTask!: () => void;\n\n      taskValue?: string;\n      renderedStatus?: string;\n\n      constructor() {\n        super();\n        const taskConfig = {\n          task: (...args: unknown[]) =>\n            new Promise((resolve, reject) => {\n              this.rejectTask = () => reject(`error`);\n              this.resolveTask = () => resolve(args.join(','));\n            }),\n        };\n        Object.assign(taskConfig, config);\n        this.task = new Task(this, taskConfig);\n      }\n\n      override update(changedProperties: PropertyValues): void {\n        super.update(changedProperties);\n        this.taskValue = this.task.value ?? this.task.error;\n        this.task.render({\n          initial: () => (this.renderedStatus = 'initial'),\n          pending: () => (this.renderedStatus = 'pending'),\n          complete: (value: unknown) => (this.renderedStatus = value as string),\n          error: (error: unknown) => (this.renderedStatus = error as string),\n        });\n      }\n    }\n    customElements.define(generateElementName(), A);\n    return A;\n  };\n\n  const renderElement = async (el: TestElement) => {\n    container.appendChild(el);\n    await el.updateComplete;\n    return el;\n  };\n\n  const getTestElement = (config?: Partial<TaskConfig<unknown[], string>>) => {\n    const A = defineTestElement(config);\n    return new A();\n  };\n\n  const tasksUpdateComplete = nextFrame;\n\n  setup(async () => {\n    container = document.createElement('div');\n    document.body.appendChild(container);\n  });\n\n  teardown(() => {\n    if (container && container.parentNode) {\n      container.parentNode.removeChild(container);\n    }\n  });\n\n  test('task without args do not run', async () => {\n    const el = await renderElement(getTestElement());\n    assert.equal(el.task.status, TaskStatus.INITIAL);\n    assert.equal(el.taskValue, undefined);\n    el.requestUpdate();\n    await tasksUpdateComplete();\n    assert.equal(el.task.status, TaskStatus.INITIAL);\n    assert.equal(el.taskValue, undefined);\n  });\n\n  test('tasks with args run initially', async () => {\n    const el = getTestElement({args: () => [el.a, el.b]});\n    await renderElement(el);\n    assert.equal(el.task.status, TaskStatus.PENDING);\n    assert.equal(el.taskValue, undefined);\n    el.resolveTask();\n    await tasksUpdateComplete();\n    assert.equal(el.task.status, TaskStatus.COMPLETE);\n    assert.equal(el.taskValue, `a,b`);\n  });\n\n  test('tasks with empty args array run once', async () => {\n    const el = getTestElement({args: () => []});\n    await renderElement(el);\n    assert.equal(el.task.status, TaskStatus.PENDING);\n    assert.equal(el.taskValue, undefined);\n    el.resolveTask();\n    await tasksUpdateComplete();\n    assert.equal(el.task.status, TaskStatus.COMPLETE);\n    assert.equal(el.taskValue, ``);\n    // Change a property that provokes an update and check that task is not run.\n    el.a = 'a1';\n    assert.isTrue(el.isUpdatePending);\n    await tasksUpdateComplete();\n    assert.equal(el.task.status, TaskStatus.COMPLETE);\n    assert.equal(el.taskValue, ``);\n  });\n\n  test('tasks do not run when args do not change', async () => {\n    const el = getTestElement({args: () => [el.a, el.b]});\n    await renderElement(el);\n    el.resolveTask();\n    await tasksUpdateComplete();\n    assert.equal(el.task.status, TaskStatus.COMPLETE);\n    assert.equal(el.taskValue, `a,b`);\n    // Provoke an update and check that task does not run.\n    el.c = 'c';\n    assert.isTrue(el.isUpdatePending);\n    await tasksUpdateComplete();\n    assert.equal(el.task.status, TaskStatus.COMPLETE);\n    assert.equal(el.taskValue, `a,b`);\n  });\n\n  test('tasks with args run when args change', async () => {\n    const el = getTestElement({args: () => [el.a, el.b]});\n    await renderElement(el);\n    el.resolveTask();\n    await tasksUpdateComplete();\n    assert.equal(el.task.status, TaskStatus.COMPLETE);\n    assert.equal(el.taskValue, `a,b`);\n\n    // *** Changing task argument runs task\n    el.a = 'a1';\n    // Check task pending.\n    await tasksUpdateComplete();\n    assert.equal(el.task.status, TaskStatus.PENDING);\n    assert.equal(el.taskValue, undefined);\n    // Complete task and check result.\n    el.resolveTask();\n    await tasksUpdateComplete();\n    assert.equal(el.task.status, TaskStatus.COMPLETE);\n    assert.equal(el.taskValue, `a1,b`);\n\n    // *** Changing other task argument runs task\n    el.b = 'b1';\n    // Check task pending.\n    await tasksUpdateComplete();\n    assert.equal(el.task.status, TaskStatus.PENDING);\n    assert.equal(el.taskValue, undefined);\n    // Complete task and check result.\n    el.resolveTask();\n    await tasksUpdateComplete();\n    assert.equal(el.task.status, TaskStatus.COMPLETE);\n    assert.equal(el.taskValue, `a1,b1`);\n  });\n\n  test('tasks do not run when `autoRun` is `false`', async () => {\n    const el = getTestElement({args: () => [el.a, el.b], autoRun: false});\n    await renderElement(el);\n    await tasksUpdateComplete();\n    assert.equal(el.task.status, TaskStatus.INITIAL);\n    assert.equal(el.taskValue, undefined);\n    // Provoke update and check that task is not run.\n    el.a = 'a1';\n    await tasksUpdateComplete();\n    assert.equal(el.task.status, TaskStatus.INITIAL);\n    assert.equal(el.taskValue, undefined);\n  });\n\n  test('task `autoRun` is settable', async () => {\n    const el = getTestElement({args: () => [el.a, el.b], autoRun: false});\n    await renderElement(el);\n    await tasksUpdateComplete();\n    assert.equal(el.task.status, TaskStatus.INITIAL);\n    assert.equal(el.taskValue, undefined);\n\n    // *** Set `autoRun` to `true` and change a task argument\n    el.task.autoRun = true;\n    el.a = 'a1';\n    // Check task is pending.\n    await tasksUpdateComplete();\n    assert.equal(el.task.status, TaskStatus.PENDING);\n    assert.equal(el.taskValue, undefined);\n    el.resolveTask();\n    // Check task completes.\n    await tasksUpdateComplete();\n    assert.equal(el.task.status, TaskStatus.COMPLETE);\n    assert.equal(el.taskValue, `a1,b`);\n    // *** Set `autoRun` to `false` and check that task does not run.\n    el.task.autoRun = false;\n    el.b = 'b1';\n    await tasksUpdateComplete();\n    assert.equal(el.task.status, TaskStatus.COMPLETE);\n    assert.equal(el.taskValue, `a1,b`);\n  });\n\n  test('task runs when `run` called', async () => {\n    const el = getTestElement({args: () => [el.a, el.b], autoRun: false});\n    await renderElement(el);\n    await tasksUpdateComplete();\n    assert.equal(el.task.status, TaskStatus.INITIAL);\n    assert.equal(el.taskValue, undefined);\n\n    // Task runs when `autoRun` is `false` and `run()` ia called.\n    el.task.run();\n    el.resolveTask();\n    await tasksUpdateComplete();\n    assert.equal(el.task.status, TaskStatus.COMPLETE);\n    assert.equal(el.taskValue, `a,b`);\n\n    // Task runs when `autoRun` is `true` and `run()` ia called.\n    el.task.autoRun = true;\n    el.task.run();\n    await tasksUpdateComplete();\n    assert.equal(el.task.status, TaskStatus.PENDING);\n    assert.equal(el.taskValue, undefined);\n    el.resolveTask();\n    await tasksUpdateComplete();\n    assert.equal(el.task.status, TaskStatus.COMPLETE);\n    assert.equal(el.taskValue, `a,b`);\n  });\n\n  test('task `run` optionally accepts args', async () => {\n    const el = getTestElement({args: () => [el.a, el.b], autoRun: false});\n    await renderElement(el);\n    await tasksUpdateComplete();\n    assert.equal(el.task.status, TaskStatus.INITIAL);\n    assert.equal(el.taskValue, undefined);\n\n    // Can specify arguments for this call to `run()`.\n    el.task.run(['d', 'e']);\n    el.resolveTask();\n    await tasksUpdateComplete();\n    assert.equal(el.task.status, TaskStatus.COMPLETE);\n    assert.equal(el.taskValue, `d,e`);\n\n    // When no arguments specified, configured arguments are used.\n    el.task.run();\n    el.resolveTask();\n    await tasksUpdateComplete();\n    assert.equal(el.task.status, TaskStatus.COMPLETE);\n    assert.equal(el.taskValue, `a,b`);\n  });\n\n  test('task reports error status', async () => {\n    const el = getTestElement({args: () => [el.a, el.b]});\n    await renderElement(el);\n    assert.equal(el.task.status, TaskStatus.PENDING);\n\n    // Catch the rejection to supress uncaught rejection warnings\n    el.task.taskComplete.catch(() => {});\n    // Task error reported.\n    el.rejectTask();\n    await tasksUpdateComplete();\n    assert.equal(el.task.status, TaskStatus.ERROR);\n    assert.equal(el.task.error, 'error');\n    assert.equal(el.task.value, undefined);\n    assert.equal(el.taskValue, 'error');\n\n    // After error, task can be run again when arguments change.\n    el.a = 'a1';\n    el.b = 'b1';\n    await tasksUpdateComplete();\n    assert.equal(el.task.status, TaskStatus.PENDING);\n    el.resolveTask();\n    await tasksUpdateComplete();\n    assert.equal(el.task.status, TaskStatus.COMPLETE);\n    assert.equal(el.task.error, undefined);\n    let expected = 'a1,b1';\n    assert.equal(el.task.value, expected);\n    assert.equal(el.taskValue, expected);\n\n    // After success, an error can be reported.\n    el.a = 'a2';\n    el.b = 'b2';\n    await tasksUpdateComplete();\n    // Catch the rejection to supress uncaught rejection warnings\n    el.task.taskComplete.catch(() => {});\n    el.rejectTask();\n    await tasksUpdateComplete();\n    assert.equal(el.task.status, TaskStatus.ERROR);\n    assert.equal(el.task.error, 'error');\n    assert.equal(el.task.value, undefined);\n    assert.equal(el.taskValue, 'error');\n\n    // After another error, task can be run again when arguments change.\n    el.a = 'a3';\n    el.b = 'b3';\n    await tasksUpdateComplete();\n    el.resolveTask();\n    await tasksUpdateComplete();\n    assert.equal(el.task.status, TaskStatus.COMPLETE);\n    assert.equal(el.task.error, undefined);\n    expected = 'a3,b3';\n    assert.equal(el.task.value, expected);\n    assert.equal(el.taskValue, expected);\n  });\n\n  test('reports only most recent value', async () => {\n    const el = getTestElement({args: () => [el.a, el.b]});\n    await renderElement(el);\n    const initialFinishTask = el.resolveTask;\n    assert.equal(el.task.status, TaskStatus.PENDING);\n\n    // While 1st task is pending, change arguments, provoking a new task run.\n    el.a = 'a1';\n    el.b = 'b1';\n    await tasksUpdateComplete();\n\n    // Complete 2nd task.\n    assert.equal(el.task.status, TaskStatus.PENDING);\n    el.resolveTask();\n    await tasksUpdateComplete();\n    assert.equal(el.task.status, TaskStatus.COMPLETE);\n    assert.equal(el.taskValue, 'a1,b1');\n\n    // Complete 1st task\n    initialFinishTask();\n    assert.isFalse(el.isUpdatePending);\n    await tasksUpdateComplete();\n    assert.equal(el.task.status, TaskStatus.COMPLETE);\n    assert.equal(el.taskValue, 'a1,b1');\n  });\n\n  test('task.render renders current status', async () => {\n    const el = getTestElement({args: () => [el.a, el.b], autoRun: false});\n    await renderElement(el);\n    // Reports initial status When `autoRun` is `false`.\n    assert.equal(el.renderedStatus, 'initial');\n    el.task.autoRun = true;\n\n    // Reports pending after a task argument changes.\n    el.a = 'a1';\n    await tasksUpdateComplete();\n    assert.equal(el.renderedStatus, 'pending');\n    el.resolveTask();\n    await tasksUpdateComplete();\n    assert.equal(el.renderedStatus, 'a1,b');\n    el.b = 'b1';\n    await tasksUpdateComplete();\n    assert.equal(el.renderedStatus, 'pending');\n\n    // Catch the rejection to supress uncaught rejection warnings\n    el.task.taskComplete.catch(() => {});\n    // Reports error after task rejects.\n    el.rejectTask();\n    await tasksUpdateComplete();\n    assert.equal(el.renderedStatus, 'error');\n\n    // Reports properly after error.\n    el.a = 'a2';\n    await tasksUpdateComplete();\n    assert.equal(el.renderedStatus, 'pending');\n    el.resolveTask();\n    await tasksUpdateComplete();\n    assert.equal(el.renderedStatus, 'a2,b1');\n  });\n\n  test('task functions can return initial state', async () => {\n    class TestEl extends ReactiveElement {\n      @property()\n      state = '';\n\n      task = new Task(\n        this,\n        async ([state]) => (state === 'initial' ? initialState : 'A'),\n        () => [this.state]\n      );\n    }\n    customElements.define(generateElementName(), TestEl);\n\n    const el = new TestEl();\n    assert.equal(el.task.status, TaskStatus.INITIAL, 'initial');\n    container.append(el);\n\n    // After one microtask we expect the task function to have been\n    // called, but not completed\n    await Promise.resolve();\n    assert.equal(el.task.status, TaskStatus.PENDING, 'pending');\n\n    await el.task.taskComplete;\n    assert.equal(el.task.status, TaskStatus.COMPLETE, 'complete');\n    assert.equal(el.task.value, 'A');\n\n    // Kick off a new task run\n    el.state = 'initial';\n\n    // We need to wait for the element to update, and then the task to run,\n    // so we wait a event loop turn:\n    await new Promise((r) => setTimeout(r, 0));\n    assert.equal(el.task.status, TaskStatus.INITIAL, 'new initial');\n  });\n});\n"]}