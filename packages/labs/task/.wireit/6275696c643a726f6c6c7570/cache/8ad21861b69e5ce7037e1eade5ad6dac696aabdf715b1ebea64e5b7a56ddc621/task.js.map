{"version":3,"file":"task.js","sources":["src/task.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport {notEqual} from '@lit/reactive-element';\nimport {ReactiveControllerHost} from '@lit/reactive-element/reactive-controller.js';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type TaskFunction<D extends [...unknown[]], R = any> = (\n  args: D\n) => R | typeof initialState | Promise<R | typeof initialState>;\nexport type ArgsFunction<D extends [...unknown[]]> = () => D;\n\n// `DepsFunction` is being maintained for BC with its previous name.\nexport {ArgsFunction as DepsFunction};\n\n/**\n * States for task status\n */\nexport const TaskStatus = {\n  INITIAL: 0,\n  PENDING: 1,\n  COMPLETE: 2,\n  ERROR: 3,\n} as const;\n\n/**\n * A special value that can be returned from task functions to reset the task\n * status to INITIAL.\n */\nexport const initialState = Symbol();\n\nexport type TaskStatus = typeof TaskStatus[keyof typeof TaskStatus];\n\nexport type StatusRenderer<R> = {\n  initial?: () => unknown;\n  pending?: () => unknown;\n  complete?: (value: R) => unknown;\n  error?: (error: unknown) => unknown;\n};\n\nexport interface TaskConfig<T extends unknown[], R> {\n  task: TaskFunction<T, R>;\n  args?: ArgsFunction<T>;\n  autoRun?: boolean;\n}\n\n// TODO(sorvell): Some issues:\n// 1. When task is triggered in `updated`, this generates a ReactiveElement\n// warning that the update was triggered in response to an update.\n// 2. And as a result of triggering in `updated`, if the user waits for the\n// `updateComplete` promise they will not see a `pending` state since this\n// will be triggered in another update; they would need to\n// `while (!(await el.updateComplete));`.\n// 3. If this is instead or additionally triggered in `willUpdate`, the\n// warning goes away in the common case that the update itself does not change\n// the deps; however, the `requestUpdate` to render pending state  will not\n// trigger another update since the element is updating. This `requestUpdate`\n// could be triggered in updated, but that results in the same issue as #2.\n// 4. There is no good signal for when the task has resolved and rendered other\n// than requestAnimationFrame. The user would need to store a promise for the\n// task and then wait for that and the element to update.\n\n/**\n * A controller that performs an asynchronous task like a fetch when its host\n * element updates. The controller performs an update on the host element\n * when the task becomes pending and when it completes. The task function must\n * be supplied and can take a list of dependencies specified as a function that\n * returns a list of values. The `value` property reports the completed value,\n * and the `error` property an error state if one occurs. The `status` property\n * can be checked for status and is of type `TaskStatus` which has states for\n * initial, pending, complete, and error. The `render` method accepts an\n * object with optional corresponding state method to easily render values\n * corresponding to the task state.\n *\n * The task is run automatically when its arguments change; however, this can\n * be customized by setting `autoRun` to false and calling `run` explicitly\n * to run the task.\n *\n * class MyElement extends ReactiveElement {\n *   url = 'example.com/api';\n *   id = 0;\n *   task = new Task(\n *     this, {\n *       task: ([url, id]) =>\n *         fetch(`${this.url}?id=${this.id}`).then(response => response.json()),\n *       args: () => [this.id, this.url]\n *     }\n *   );\n *\n *   update(changedProperties) {\n *     super.update(changedProperties);\n *     this.task.render({\n *       pending: () => console.log('task pending'),\n *       complete: (value) => console.log('task value', value);\n *     });\n *   }\n * }\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport class Task<T extends [...unknown[]] = any, R = any> {\n  private _previousArgs?: T;\n  private _task: TaskFunction<T, R>;\n  private _getArgs?: ArgsFunction<T>;\n  private _callId = 0;\n  private _host: ReactiveControllerHost;\n  private _value?: R;\n  private _error?: unknown;\n  status: TaskStatus = TaskStatus.INITIAL;\n\n  /**\n   * A Promise that resolve when the current task run is complete.\n   *\n   * If a new task run is started while a previous run is pending, the Promise\n   * is kept and only resolved when the new run is completed.\n   */\n  taskComplete!: Promise<R>;\n\n  /**\n   * Controls if they task will run when its arguments change. Defaults to true.\n   */\n  autoRun = true;\n\n  private _resolveTaskComplete!: (value: R) => void;\n  private _rejectTaskComplete!: (e: unknown) => void;\n\n  constructor(\n    host: ReactiveControllerHost,\n    task: TaskFunction<T, R>,\n    args?: ArgsFunction<T>\n  );\n  constructor(host: ReactiveControllerHost, task: TaskConfig<T, R>);\n  constructor(\n    host: ReactiveControllerHost,\n    task: TaskFunction<T, R> | TaskConfig<T, R>,\n    args?: ArgsFunction<T>\n  ) {\n    this._host = host;\n    this._host.addController(this);\n    const taskConfig =\n      typeof task === 'object' ? task : ({task, args} as TaskConfig<T, R>);\n    this._task = taskConfig.task;\n    this._getArgs = taskConfig.args;\n    if (taskConfig.autoRun !== undefined) {\n      this.autoRun = taskConfig.autoRun;\n    }\n    this.taskComplete = new Promise((res, rej) => {\n      this._resolveTaskComplete = res;\n      this._rejectTaskComplete = rej;\n    });\n  }\n\n  hostUpdated() {\n    this.performTask();\n  }\n\n  protected async performTask() {\n    const args = this._getArgs?.();\n    if (this.shouldRun(args)) {\n      this.run(args);\n    }\n  }\n\n  /**\n   * Determines if the task should run when it's triggered as part of the\n   * host's reactive lifecycle. Note, this is not checked when `run` is\n   * explicitly called. A task runs automatically when `autoRun` is `true` and\n   * either its arguments change.\n   * @param args The task's arguments\n   * @returns\n   */\n  protected shouldRun(args?: T) {\n    return this.autoRun && this._argsDirty(args);\n  }\n\n  /**\n   * A task runs when its arguments change, as long as the `autoRun` option\n   * has not been set to false. To explicitly run a task outside of these\n   * conditions, call `run`. A custom set of arguments can optionally be passed\n   * and if not given, the configured arguments are used.\n   * @param args optional set of arguments to use for this task run\n   */\n  async run(args?: T) {\n    args ??= this._getArgs?.();\n    if (\n      this.status === TaskStatus.COMPLETE ||\n      this.status === TaskStatus.ERROR\n    ) {\n      this.taskComplete = new Promise((res, rej) => {\n        this._resolveTaskComplete = res;\n        this._rejectTaskComplete = rej;\n      });\n    }\n    this.status = TaskStatus.PENDING;\n    this._error = undefined;\n    this._value = undefined;\n    let result!: R | typeof initialState;\n    let error: unknown;\n    // Request an update to report pending state.\n    this._host.requestUpdate();\n    const key = ++this._callId;\n    try {\n      result = await this._task(args!);\n    } catch (e) {\n      error = e;\n    }\n    // If this is the most recent task call, process this value.\n    if (this._callId === key) {\n      if (result === initialState) {\n        this.status = TaskStatus.INITIAL;\n      } else {\n        if (error === undefined) {\n          this.status = TaskStatus.COMPLETE;\n          this._resolveTaskComplete(result as R);\n        } else {\n          this.status = TaskStatus.ERROR;\n          this._rejectTaskComplete(error);\n        }\n        this._value = result as R;\n        this._error = error;\n      }\n      // Request an update with the final value.\n      this._host.requestUpdate();\n    }\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  get error() {\n    return this._error;\n  }\n\n  render(renderer: StatusRenderer<R>) {\n    switch (this.status) {\n      case TaskStatus.INITIAL:\n        return renderer.initial?.();\n      case TaskStatus.PENDING:\n        return renderer.pending?.();\n      case TaskStatus.COMPLETE:\n        return renderer.complete?.(this.value!);\n      case TaskStatus.ERROR:\n        return renderer.error?.(this.error);\n      default:\n        // exhaustiveness check\n        this.status as void;\n    }\n  }\n\n  private _argsDirty(args?: T) {\n    const prev = this._previousArgs;\n    this._previousArgs = args;\n    return Array.isArray(args) && Array.isArray(prev)\n      ? args.length === prev.length && args.some((v, i) => notEqual(v, prev[i]))\n      : args !== prev;\n  }\n}\n"],"names":["TaskStatus","INITIAL","PENDING","COMPLETE","ERROR","initialState","Symbol","Task","constructor","host","task","args","this","_callId","status","autoRun","_host","addController","taskConfig","_task","_getArgs","undefined","taskComplete","Promise","res","rej","_resolveTaskComplete","_rejectTaskComplete","hostUpdated","performTask","async","_a","call","shouldRun","run","_argsDirty","result","error","_error","_value","requestUpdate","key","e","value","render","renderer","initial","pending","_b","_c","complete","_d","prev","_previousArgs","Array","isArray","length","some","v","i","notEqual"],"mappings":";;;;;GAoBa,MAAAA,EAAa,CACxBC,QAAS,EACTC,QAAS,EACTC,SAAU,EACVC,MAAO,GAOIC,EAAeC,eAsEfC,EAgCXC,YACEC,EACAC,EACAC,GA/BMC,KAAOC,EAAG,EAIlBD,KAAAE,OAAqBd,EAarBY,KAAOG,SAAG,EAgBRH,KAAKI,EAAQP,EACbG,KAAKI,EAAMC,cAAcL,MACzB,MAAMM,EACY,iBAATR,EAAoBA,EAAQ,CAACA,KAAAA,EAAMC,KAAAA,GAC5CC,KAAKO,EAAQD,EAAWR,KACxBE,KAAKQ,EAAWF,EAAWP,UACAU,IAAvBH,EAAWH,UACbH,KAAKG,QAAUG,EAAWH,SAE5BH,KAAKU,aAAe,IAAIC,SAAQ,CAACC,EAAKC,KACpCb,KAAKc,EAAuBF,EAC5BZ,KAAKe,EAAsBF,KAI/BG,cACEhB,KAAKiB,cAGGC,0BACR,MAAMnB,EAAoB,QAAboB,EAAAnB,KAAKQ,SAAQ,IAAAW,OAAA,EAAAA,EAAAC,KAAbpB,MACTA,KAAKqB,UAAUtB,IACjBC,KAAKsB,IAAIvB,GAYHsB,UAAUtB,GAClB,OAAOC,KAAKG,SAAWH,KAAKuB,EAAWxB,GAUzCmB,UAAUnB,SAcR,IAAIyB,EACAC,EAdJ1B,MAAAA,IAAAA,EAAS,QAAAoB,EAAAnB,KAAKQ,SAAL,IAAAW,OAAA,EAAAA,EAAAC,KAAApB,OAESZ,IAAhBY,KAAKE,QACWd,IAAhBY,KAAKE,SAELF,KAAKU,aAAe,IAAIC,SAAQ,CAACC,EAAKC,KACpCb,KAAKc,EAAuBF,EAC5BZ,KAAKe,EAAsBF,MAG/Bb,KAAKE,OAASd,EACdY,KAAK0B,OAASjB,EACdT,KAAK2B,OAASlB,EAIdT,KAAKI,EAAMwB,gBACX,MAAMC,IAAQ7B,KAAKC,EACnB,IACEuB,QAAexB,KAAKO,EAAMR,GAC1B,MAAO+B,GACPL,EAAQK,EAGN9B,KAAKC,IAAY4B,IACfL,IAAW/B,EACbO,KAAKE,OAASd,QAEAqB,IAAVgB,GACFzB,KAAKE,OAASd,EACdY,KAAKc,EAAqBU,KAE1BxB,KAAKE,OAASd,EACdY,KAAKe,EAAoBU,IAE3BzB,KAAK2B,EAASH,EACdxB,KAAK0B,EAASD,GAGhBzB,KAAKI,EAAMwB,iBAIXG,YACF,OAAO/B,KAAK2B,EAGVF,YACF,OAAOzB,KAAK0B,EAGdM,OAAOC,eACL,OAAQjC,KAAKE,QACX,KAAKd,EACH,OAAO,UAAA6C,EAASC,eAAT,IAAAf,OAAA,EAAAA,EAAAC,KAAAa,GACT,KAAK7C,EACH,OAAO,UAAA6C,EAASE,eAAT,IAAAC,OAAA,EAAAA,EAAAhB,KAAAa,GACT,KAAK7C,EACH,OAAwB,QAAjBiD,EAAAJ,EAASK,gBAAQ,IAAAD,OAAA,EAAAA,EAAAjB,KAAjBa,EAAoBjC,KAAK+B,OAClC,KAAK3C,EACH,OAAqB,QAAdmD,EAAAN,EAASR,aAAK,IAAAc,OAAA,EAAAA,EAAAnB,KAAda,EAAiBjC,KAAKyB,OAC/B,QAEEzB,KAAKE,QAIHqB,EAAWxB,GACjB,MAAMyC,EAAOxC,KAAKyC,EAElB,OADAzC,KAAKyC,EAAgB1C,EACd2C,MAAMC,QAAQ5C,IAAS2C,MAAMC,QAAQH,GACxCzC,EAAK6C,SAAWJ,EAAKI,QAAU7C,EAAK8C,MAAK,CAACC,EAAGC,IAAMC,EAASF,EAAGN,EAAKO,MACpEhD,IAASyC"}